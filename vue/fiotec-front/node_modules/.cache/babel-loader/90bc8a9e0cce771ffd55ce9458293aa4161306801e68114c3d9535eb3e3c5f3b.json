{"ast":null,"code":"// import router from '@/router'\nimport axios from 'axios';\n\n// axios.defaults.withCredentials = true\naxios.defaults.baseURL = \"http://localhost:8181\";\n// axios.defaults.headers.common['X-Aude-App-Version'] = appVersion\n\n// axios.interceptors.response.use((response) => {\n//   return response\n// }, (error) => {\n//   if (error.response.status === 419) {\n//     localStorage.clear()\n//     router.push({ name: 'Login' })\n//   }\n//   if (error.response.status === 401) {\n//     if (router.currentRoute.meta.norequiresAuth !== true) {\n//       // axios.get('/csrf-cookie')\n//       // axios.get(error.response.config.url)\n//       localStorage.clear()\n//       if (router.currentRoute.name !== 'Login') {\n//         router.push({ name: 'Login' })\n//       }\n//     }\n//   }\n//   return Promise.reject(error)\n// })\n\nexport default axios;","map":{"version":3,"names":["axios","defaults","baseURL"],"sources":["/app/src/api/axios.js"],"sourcesContent":["// import router from '@/router'\nimport axios from 'axios'\n\n// axios.defaults.withCredentials = true\naxios.defaults.baseURL = \"http://localhost:8181\"\n// axios.defaults.headers.common['X-Aude-App-Version'] = appVersion\n\n// axios.interceptors.response.use((response) => {\n//   return response\n// }, (error) => {\n//   if (error.response.status === 419) {\n//     localStorage.clear()\n//     router.push({ name: 'Login' })\n//   }\n//   if (error.response.status === 401) {\n//     if (router.currentRoute.meta.norequiresAuth !== true) {\n//       // axios.get('/csrf-cookie')\n//       // axios.get(error.response.config.url)\n//       localStorage.clear()\n//       if (router.currentRoute.name !== 'Login') {\n//         router.push({ name: 'Login' })\n//       }\n//     }\n//   }\n//   return Promise.reject(error)\n// })\n\nexport default axios\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACAA,KAAK,CAACC,QAAQ,CAACC,OAAO,GAAG,uBAAuB;AAChD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeF,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}